{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import numpy as np\
import matplotlib.pyplot as plt\
import matplotlib.image as mpimg\
from matplotlib.pyplot import cm\
import os\
import time\
\
from sklearn.linear_model import LinearRegression\
from sklearn import linear_model\
from sklearn.metrics import mean_squared_error\
\
from numpy.random import seed\
from numpy.random import rand\
lr = LinearRegression()\
\
\
# this section defines the dataset, coupled harmonic oscillators\
threshold = 5000\
\
xpos = []\
ypos = []\
x_position = []\
y_position = []\
times = []\
\
dt = 0.01\
\
x_position = []\
y_position = [] \
\
t = 0 #initial time \
\
x0 = 0 #initial positions of all masses \
y0 = 1\
x1 = 1\
y1 = 0\
x2 = 1\
y2 = 1\
x3 = 0\
y3 = 0 \
print('x0', x0, 'y0', y0)\
vx0 = 0 # Initial velocities for each spring in the y and x directions \
vy0 = 0\
vx1 = 0\
vy1 = 0\
vx2 = 0\
vy2 = 0\
vx3 = 0\
vy3 = 0\
\
k01 = 10\
k02 = 20\
k03 = 30\
k23 = 40\
k13 = 50\
\
#b = 5*np.random.rand(5)\
b0 = 0.2 \
b1 = 2\
b2 = 1.4\
b3 = .7\
b13 = 1.8\
\
m = (np.random.rand(4))\
m0 = 0.5 #mass 1\
m1 = 0.6 #mass 2\
m2 = 0.7 #mass 3\
m3 = 0.8 #mass 4\
for i in range(0,threshold):\
\
    spring01x = (-1/m0) * k01*(x0 - x1)*dt #motion in x, y for all springs \
    spring01y = (-1/m0) * k01*(y0 - y1)*dt #tracking mass 0 w respect to 1\
    \
    spring10x = (-1/m1) * k01*(x1 - x0)*dt #tracking mass 1 w respect to 0 \
    spring10y = (-1/m1) * k01*(y1 - y0)*dt\
\
    spring02x = (-1/m0) * k02*(x0 - x2)*dt #tracking mass 0 w respect to 2\
    spring02y = (-1/m0) * k02*(y0 - y2)*dt\
    \
    spring20x = (-1/m2) * k02*(x2 - x0)*dt #tracking mass 2 w respect to 0 \
    spring20y = (-1/m2) * k02*(y2 - y0)*dt\
\
    spring03x = (-1/m0) * k03*(x0 - x3)*dt #tracking mass 0 w respect to 3\
    spring03y = (-1/m0) * k03*(y0 - y3)*dt\
    \
    spring30x = (-1/m3) * k03*(x3 - x0)*dt #tracking mass 3 w respect to 0\
    spring30y = (-1/m3) * k03*(y3 - y0)*dt\
\
    spring13x = (-1/m1) * k13*(x1 - x3)*dt #tracking mass 1 w respect to 3\
    spring13y = (-1/m1) * k13*(y1 - y3)*dt\
\
    spring31x = (-1/m3) * k13*(x3 - x1)*dt #tracking mass 3 w respect to 1\
    spring31y = (-1/m3) * k13*(y3 - y1)*dt\
    \
    spring23x = (-1/m2) * k23*(x2 - x3)*dt #tracking mass 2 w respect to 3\
    spring23y = (-1/m2) * k23*(y2 - y3)*dt\
    \
    spring32x = (-1/m3) * k23*(x3 - x2)*dt #tracking mass 3 w respect to 2\
    spring32y = (-1/m3) * k23*(y3 - y2)*dt\
    \
#    print("type of spring things", type(spring23x))\
\
    damping01x = (-1/m0) * b0*(vx0) #damping in each direction\
    damping01y = (-1/m0) * b0*(vy0) #damper between 0 and 1 from 0's perspective\
    \
    damping02x = (-1/m0) * b0*(vx0) #damper between 0 and 2 from 0's perspective\
    damping02y = (-1/m0) * b0*(vy0) \
    \
    damping03x = (-1/m0) * b0*(vx0) #damper between 0 and 3 from 0's perspective \
    damping03y = (-1/m0) * b0*(vy0) \
    \
    damping13x = (-1/m1) * b1*(vx1) #damper between 1 and 3 from 1's perspective\
    damping13y = (-1/m1) * b1*(vy1)\
    \
    damping23x = (-1/m2) * b2*(vx2) #damper between 2 and 3 from 2's persective\
    damping23y = (-1/m2) * b2*(vy2)\
    \
    damping10x = (-1/m1) * b1*(vx1) #damper between 1 and 0 from 1's perspective\
    damping10y = (-1/m1) * b1*(vy1) \
    \
    damping20x = (-1/m2) * b2*(vx2) #damper between 2 and 0 from 2's perspective\
    damping20y = (-1/m2) * b2*(vy2)  \
    \
    damping30x = (-1/m3) * b3*(vx3) #damper between 3 and 0 from 3's perspective\
    damping30y = (-1/m3) * b3*(vy3)\
    \
    damping31x = (-1/m3) * b3*(vx3) #damper between 3 and 1 from 3's perspective\
    damping31y = (-1/m3) * b3*(vy3)\
    \
    damping32x = (-1/m3) * b3*(vx3) #damper between 3 and 2 from 3's perspective\
    damping32y = (-1/m3) * b3*(vy3)\
    \
    #print("type of damping", type(damping23y)\
    x_damping0 = damping01x + damping02x + damping03x #damping on mass0 \
    y_damping0 = damping01y + damping02y + damping03y #damping on mass0\
    \
    x_damping1 = damping10x + damping13x #damping force on mass 1\
    y_damping1 = damping10y + damping13y\
    \
    x_damping2 = damping20x + damping23x #damping force on mass2\
    y_damping2 = damping20y + damping23y\
    \
    x_damping3 = damping30x + damping31x + damping32x #damping force on mass 3\
    y_damping3 = damping30y + damping31x + damping32y\
    \
    x_springs0 = spring01x + spring02x + spring03x #all mass 0 springs\
    y_springs0 = spring01y + spring02y + spring03y \
    \
    x_springs1 = spring10x + spring13x #all mass 1 springs\
    y_springs1 = spring10y + spring13y\
    \
    x_springs2 = spring20x + spring23x #all mass 2 springs\
    y_springs2 = spring20y + spring23y\
    \
    x_springs3 = spring30x + spring31x + spring32x #all mass 3 springs\
    y_springs3 = spring30y + spring31y + spring32y\
                          \
#         dvdt = springs - b*((vx0**2 +vy0**2)**(1/2)) + (n[i,0])\
    dvdt_x0 = x_springs0 + x_damping0*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    dvdt_y0 = y_springs0 + y_damping0*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    \
    dvdt_x1 = x_springs1 + x_damping1*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    dvdt_y1 = y_springs1 + y_damping1*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    \
    dvdt_x2 = x_springs2 + x_damping2*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    dvdt_y2 = y_springs2 + y_damping2*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    \
    dvdt_x3 = x_springs3 + x_damping3*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
    dvdt_y3 = y_springs3 + y_damping3*dt + np.random.normal(loc=0.0,scale=dt,size=1)\
\
    vx0 = vx0 + dvdt_x0 #updates velocity from dv/dts\
    vy0 = vy0 + dvdt_y0\
    vx1 = vx1 + dvdt_x1    \
    vy1 = vy1 + dvdt_y1\
    vx2 = vx2 + dvdt_x2    \
    vy2 = vy2 + dvdt_y2\
    vx3 = vx3 + dvdt_x3    \
    vy3 = vy3 + dvdt_y3\
    \
    x0 = x0 + vx0*dt #updates positions from new velocities \
    y0 = y0 + vy0*dt \
    x1 = x1 + vx1*dt \
    y1 = y1 + vy1*dt\
    x2 = x2 + vx2*dt \
    y2 = y2 + vy2*dt\
    x3 = x3 + vx3*dt \
    y3 = y3 + vy3*dt\
\
    x_position.append(x0) #xposition and yposition are empty lists \
    y_position.append(y0)                      #defined above\
    #recording the position of mass \
\
    times.append(t)\
    t += dt\
\
    i += 1\
    #print(i)\
# this function will allow us to compute position and times for masses on springs separately. \
# however, we'd like them to be connected to each other. \
#print(x_position[:-10], y_position[:-10])\
print(len(x_position), len(y_position))\
\
threshold = 2000\
back = 20\
start = 0\
\
def mse_pipeline(features, position, predstorage, msestorage):\
    #     ''' \
    #     requires  features, position, pred_list, mse_list\
    #     where features is # of features the data will have,\
    #     position is which pos fun (ex. dt = 0.01, dt =  0.005)\
    #     predstorage stores preds, msestorage stores mses\
    #     '''\
    X = []\
    y = []\
    \
    #iteration counter\
    \
    mse_list = [] #these store preds and mses \
    pred_list = []\
    \
\
    for z in range(start, threshold):\
        if features == 0:\
            X = np.asarray([[0]])\
#                 print('X shape for 0', X.shape)\
        else:\
            X = np.asarray(position[z:-back])\
#                 print('X shape for not 0', X.shape)\
            for x in range(1, features+1):\
                X = np.column_stack((X, position[z+x:-back+x])) #generation of X\
                #stacks the position features in the 2nd dimension\
                if X.shape[1] < 2:\
                    print('oops!') #will only return a 2d array. for 1 feature, it duplicates the data\
                    break\
\
            y = position[z + X.shape[1] : -back + X.shape[1]] #y (targets) is the next position feature\
        #             print('yshape', y.shape)\
        #             i+=1\
        #             print(i)\
            model = lr.fit(X, y)\
\
            predictions = model.predict(X) \
            mse = mean_squared_error(predictions, y)\
\
            pred_list.append(predictions) #adds the prediction for the iteration to the bottom of the list\
            mse_list.append(mse) #adds the mse for the iteration to the bottom of the list \
\
\
        predstorage.append(np.asarray(pred_list)) #these append to the total list, xpreds, ypreds\
        msestorage.append(np.asarray(mse_list))\
\
\
xpreds = [[],[],[],[],[],[],[],[],[],[],[],[]] #these are the lists that hold prediction and mse data\
ypreds = [[],[],[],[],[],[],[],[],[],[],[],[]]\
\
xmses  = [[],[],[],[],[],[],[],[],[],[],[],[]]\
ymses  = [[],[],[],[],[],[],[],[],[],[],[],[]]\
\
\
feat = 10 #indexes to the end of features\
\
\
for i in range(1,feat):\
    mse_pipeline(i, x_position, xpreds[i-1], xmses[i-1])\
    mse_pipeline(i, y_position, ypreds[i-1], ymses[i-1])\
    print(len(xpreds[i-1][0]), len(ypreds[i-1][0]))\
    print(i)\
\
\
\
for i in range(1,feat):\
    print(len(xpreds[i-1][0]), len(xpreds))\
\
features = []\
for i in range(1,feat):\
    features.append(i)\
print(features)\
average = None\
\
averages0 = []\
average0 = None\
averages0 = None\
# averages1 = []\
# averages2 = []\
std0_l = []\
# std1_l = []\
# std2_l = []\
#for each i we want the average \
for i in range(1,feat):\
    \
    average_i0 = np.asarray(xmses[i][:])\
    average0   = np.mean(average_i0)\
    averages0.append(average0)\
\
\
std0 = np.std(averages0)\
std0_l.append(std0)\
\
plt.scatter(features, averages0, label = 'features (memory) vs. average MSE for xdata = ')\
plt.errorbar(features, averages0, yerr=std0_l)\
\
plt.savefig('xdata mses vs features')\
plt.show()\
\
averages1 = []\
# averages1 = []\
# averages2 = []\
std1_l = []\
# std1_l = []\
# std2_l = []\
#for each i we want the average \
for i in range(1,feat):\
    \
    average_i1 = np.asarray(ymses[i][:][:])\
    average1   = np.mean(average_i1)\
    averages1.append(average1)\
\
\
    std1 = np.std(averages1)\
    std1_l.append(std1)\
\
plt.scatter(features, averages1, label = 'features (memory) vs. average MSE for ydata')\
plt.errorbar(features, averages1, yerr=std1_l)\
\
plt.savefig('y positions mses std')\
plt.show()\
}